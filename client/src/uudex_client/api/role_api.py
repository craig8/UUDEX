# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uudex_client.api_client import ApiClient


class RoleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_create_role(self, **kwargs):  # noqa: E501
        """Create a single Role  # noqa: E501

        Only a UUDEX Admin can create a role.  The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_role(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_create_role_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_create_role_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_create_role_with_http_info(self, **kwargs):  # noqa: E501
        """Create a single Role  # noqa: E501

        Only a UUDEX Admin can create a role.  The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_role_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_role" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_delete_role(self, role_uuid, **kwargs):  # noqa: E501
        """Delete a single Role  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_role(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_delete_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_delete_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
            return data

    def auth_delete_role_with_http_info(self, role_uuid, **kwargs):  # noqa: E501
        """Delete a single Role  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_role_with_http_info(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_delete_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_uuid' is set
        if ('role_uuid' not in params or
                params['role_uuid'] is None):
            raise ValueError("Missing the required parameter `role_uuid` when calling `auth_delete_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_uuid' in params:
            path_params['role_uuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles/{role_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_roles(self, **kwargs):  # noqa: E501
        """Return a collection of all Roles in the system  # noqa: E501

        This endpoint open to to all users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_roles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_roles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_roles_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_get_all_roles_with_http_info(self, **kwargs):  # noqa: E501
        """Return a collection of all Roles in the system  # noqa: E501

        This endpoint open to to all users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_roles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_roles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_role(self, role_uuid, **kwargs):  # noqa: E501
        """Get a single Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_role(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_role_with_http_info(self, role_uuid, **kwargs):  # noqa: E501
        """Get a single Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_role_with_http_info(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_uuid' is set
        if ('role_uuid' not in params or
                params['role_uuid'] is None):
            raise ValueError("Missing the required parameter `role_uuid` when calling `auth_get_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_uuid' in params:
            path_params['role_uuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles/{role_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_role_endpoints(self, role_uuid, **kwargs):  # noqa: E501
        """Returns all Endpoints that have been granted the given Role  # noqa: E501

        The invoker must have the either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_role_endpoints(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_role_endpoints_with_http_info(role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_role_endpoints_with_http_info(role_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_role_endpoints_with_http_info(self, role_uuid, **kwargs):  # noqa: E501
        """Returns all Endpoints that have been granted the given Role  # noqa: E501

        The invoker must have the either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_role_endpoints_with_http_info(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_role_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_uuid' is set
        if ('role_uuid' not in params or
                params['role_uuid'] is None):
            raise ValueError("Missing the required parameter `role_uuid` when calling `auth_get_role_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_uuid' in params:
            path_params['role_uuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles/{role_uuid}/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_grant_role(self, role_uuid, **kwargs):  # noqa: E501
        """Grant role to the given Endpoint  # noqa: E501

        The invoker must belong to the same Participant as the Endpoint it's granting the role to AND the invoker must have the either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_grant_role(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :param EndpointUuid body:
        :return: EndpointUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_grant_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_grant_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
            return data

    def auth_grant_role_with_http_info(self, role_uuid, **kwargs):  # noqa: E501
        """Grant role to the given Endpoint  # noqa: E501

        The invoker must belong to the same Participant as the Endpoint it's granting the role to AND the invoker must have the either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_grant_role_with_http_info(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :param EndpointUuid body:
        :return: EndpointUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_grant_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_uuid' is set
        if ('role_uuid' not in params or
                params['role_uuid'] is None):
            raise ValueError("Missing the required parameter `role_uuid` when calling `auth_grant_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_uuid' in params:
            path_params['role_uuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles/{role_uuid}/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointUuid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_update_role(self, role_uuid, **kwargs):  # noqa: E501
        """Update a single Role  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_role(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_update_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_update_role_with_http_info(role_uuid, **kwargs)  # noqa: E501
            return data

    def auth_update_role_with_http_info(self, role_uuid, **kwargs):  # noqa: E501
        """Update a single Role  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_role_with_http_info(role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_uuid: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_update_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_uuid' is set
        if ('role_uuid' not in params or
                params['role_uuid'] is None):
            raise ValueError("Missing the required parameter `role_uuid` when calling `auth_update_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_uuid' in params:
            path_params['role_uuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/roles/{role_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
