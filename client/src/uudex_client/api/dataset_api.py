# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uudex_client.api_client import ApiClient


class DatasetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dataset(self, **kwargs):  # noqa: E501
        """Create a single Dataset in the given Subject and optionally publish a message that contains the Dataset  # noqa: E501

        The invoker must have the PUBLISH privilege to the Subject containing the dataset OR the Subject that will contain the Dataset must be owned by the invoker's Participant.  A UUDEX Admin may create a dataset without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dataset body:
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dataset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dataset_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dataset_with_http_info(self, **kwargs):  # noqa: E501
        """Create a single Dataset in the given Subject and optionally publish a message that contains the Dataset  # noqa: E501

        The invoker must have the PUBLISH privilege to the Subject containing the dataset OR the Subject that will contain the Dataset must be owned by the invoker's Participant.  A UUDEX Admin may create a dataset without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dataset body:
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dataset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasetEnriched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dataset(self, dataset_uuid, **kwargs):  # noqa: E501
        """Delete the Dataset and optionally publish a notification message  # noqa: E501

        The owner of the Subject containing the Dataset must be the invoker's Participant OR the invoker must have been granted the MANAGE privilege to the Subject containing the Dataset.  A UUDEX Admin may delete any Dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :param bool publish_message: Whether to also publish a notice message to the parent subject
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
            return data

    def delete_dataset_with_http_info(self, dataset_uuid, **kwargs):  # noqa: E501
        """Delete the Dataset and optionally publish a notification message  # noqa: E501

        The owner of the Subject containing the Dataset must be the invoker's Participant OR the invoker must have been granted the MANAGE privilege to the Subject containing the Dataset.  A UUDEX Admin may delete any Dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset_with_http_info(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :param bool publish_message: Whether to also publish a notice message to the parent subject
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_uuid', 'publish_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_uuid' is set
        if ('dataset_uuid' not in params or
                params['dataset_uuid'] is None):
            raise ValueError("Missing the required parameter `dataset_uuid` when calling `delete_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_uuid' in params:
            path_params['dataset_uuid'] = params['dataset_uuid']  # noqa: E501

        query_params = []
        if 'publish_message' in params:
            query_params.append(('publish_message', params['publish_message']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset(self, dataset_uuid, **kwargs):  # noqa: E501
        """Returns a single Dataset  # noqa: E501

        The invoker must have the SUBSCRIBE privilege to the Subject containing the dataset OR the Subject containing the Dataset must be owned by the invoker's Participant.  A UUDEX Admin may get any dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
            return data

    def get_dataset_with_http_info(self, dataset_uuid, **kwargs):  # noqa: E501
        """Returns a single Dataset  # noqa: E501

        The invoker must have the SUBSCRIBE privilege to the Subject containing the dataset OR the Subject containing the Dataset must be owned by the invoker's Participant.  A UUDEX Admin may get any dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_with_http_info(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_uuid' is set
        if ('dataset_uuid' not in params or
                params['dataset_uuid'] is None):
            raise ValueError("Missing the required parameter `dataset_uuid` when calling `get_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_uuid' in params:
            path_params['dataset_uuid'] = params['dataset_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasetEnriched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasets(self, subject_uuid, **kwargs):  # noqa: E501
        """Returns a collection of Datasets, given the passed search parameters  # noqa: E501

        The invoker must have the SUBSCRIBE privilege to the Subject containing the fetched Datasets OR the Subjects containing the Datasets must be owned by the invoker's Participant.  A UUDEX Admin may get Datasets in any Subject without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasets(subject_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_uuid: Subject to search (required)
        :param str search_expression: Contains a custom query expression that applies a filter based on key/value properties
        :param str participant_uuid: Limit search to datasets owned by this Participant
        :return: list[DatasetEnriched]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasets_with_http_info(subject_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasets_with_http_info(subject_uuid, **kwargs)  # noqa: E501
            return data

    def get_datasets_with_http_info(self, subject_uuid, **kwargs):  # noqa: E501
        """Returns a collection of Datasets, given the passed search parameters  # noqa: E501

        The invoker must have the SUBSCRIBE privilege to the Subject containing the fetched Datasets OR the Subjects containing the Datasets must be owned by the invoker's Participant.  A UUDEX Admin may get Datasets in any Subject without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasets_with_http_info(subject_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_uuid: Subject to search (required)
        :param str search_expression: Contains a custom query expression that applies a filter based on key/value properties
        :param str participant_uuid: Limit search to datasets owned by this Participant
        :return: list[DatasetEnriched]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_uuid', 'search_expression', 'participant_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_uuid' is set
        if ('subject_uuid' not in params or
                params['subject_uuid'] is None):
            raise ValueError("Missing the required parameter `subject_uuid` when calling `get_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subject_uuid' in params:
            query_params.append(('subject_uuid', params['subject_uuid']))  # noqa: E501
        if 'search_expression' in params:
            query_params.append(('search_expression', params['search_expression']))  # noqa: E501
        if 'participant_uuid' in params:
            query_params.append(('participant_uuid', params['participant_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DatasetEnriched]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dataset(self, dataset_uuid, **kwargs):  # noqa: E501
        """Update the Dataset and optionally publish a notification message  # noqa: E501

        The owner of the Subject that contains the Dataset must be the invoker's Participant OR the invoker must have been granted the MANAGE privilege to the Subject containing the Dataset.  A UUDEX Admin may update any Dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dataset(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :param Dataset body:
        :param bool publish_message: Whether to also publish a notice message to the parent subject
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dataset_with_http_info(dataset_uuid, **kwargs)  # noqa: E501
            return data

    def update_dataset_with_http_info(self, dataset_uuid, **kwargs):  # noqa: E501
        """Update the Dataset and optionally publish a notification message  # noqa: E501

        The owner of the Subject that contains the Dataset must be the invoker's Participant OR the invoker must have been granted the MANAGE privilege to the Subject containing the Dataset.  A UUDEX Admin may update any Dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dataset_with_http_info(dataset_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_uuid: (required)
        :param Dataset body:
        :param bool publish_message: Whether to also publish a notice message to the parent subject
        :return: DatasetEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_uuid', 'body', 'publish_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_uuid' is set
        if ('dataset_uuid' not in params or
                params['dataset_uuid'] is None):
            raise ValueError("Missing the required parameter `dataset_uuid` when calling `update_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_uuid' in params:
            path_params['dataset_uuid'] = params['dataset_uuid']  # noqa: E501

        query_params = []
        if 'publish_message' in params:
            query_params.append(('publish_message', params['publish_message']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasetEnriched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
