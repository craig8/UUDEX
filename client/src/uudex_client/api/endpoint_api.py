# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uudex_client.api_client import ApiClient


class EndpointApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_create_endpoint(self, **kwargs):  # noqa: E501
        """Create a single Endpoint  # noqa: E501

        Create an Endpoint for the Participant that the invoker belongs to. The invoker must have the ParticipantAdmin role.  A UUDEX Administrator may create any Endpoint for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_endpoint(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Endpoint body:
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_create_endpoint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_create_endpoint_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_create_endpoint_with_http_info(self, **kwargs):  # noqa: E501
        """Create a single Endpoint  # noqa: E501

        Create an Endpoint for the Participant that the invoker belongs to. The invoker must have the ParticipantAdmin role.  A UUDEX Administrator may create any Endpoint for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_endpoint_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Endpoint body:
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_endpoint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Endpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_delete_endpoint(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Delete an Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to AND the invoker must have the ParticipantAdmin role.    A UUDEX Admin may delete any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_endpoint(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_delete_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_delete_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
            return data

    def auth_delete_endpoint_with_http_info(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Delete an Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to AND the invoker must have the ParticipantAdmin role.    A UUDEX Admin may delete any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_endpoint_with_http_info(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_delete_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_uuid' is set
        if ('endpoint_uuid' not in params or
                params['endpoint_uuid'] is None):
            raise ValueError("Missing the required parameter `endpoint_uuid` when calling `auth_delete_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_uuid' in params:
            path_params['endpoint_uuid'] = params['endpoint_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/{endpoint_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_endpoint_groups(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Returns a collection of groups the Endpoint is a member of  # noqa: E501

        The Endpoint must belong to the same Participant as the invoker AND the invoker must have the ParticipantAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoint_groups(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_endpoint_groups_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_endpoint_groups_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_endpoint_groups_with_http_info(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Returns a collection of groups the Endpoint is a member of  # noqa: E501

        The Endpoint must belong to the same Participant as the invoker AND the invoker must have the ParticipantAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoint_groups_with_http_info(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_endpoint_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_uuid' is set
        if ('endpoint_uuid' not in params or
                params['endpoint_uuid'] is None):
            raise ValueError("Missing the required parameter `endpoint_uuid` when calling `auth_get_all_endpoint_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_uuid' in params:
            path_params['endpoint_uuid'] = params['endpoint_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/{endpoint_uuid}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericAuthObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_endpoint_roles(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Returns a collection of Roles the Endpoint is a member of  # noqa: E501

        The Endpoint must belong to the same Participant as the invoker AND the invoker must have either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoint_roles(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_endpoint_roles_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_endpoint_roles_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_endpoint_roles_with_http_info(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Returns a collection of Roles the Endpoint is a member of  # noqa: E501

        The Endpoint must belong to the same Participant as the invoker AND the invoker must have either the ParticipantAdmin role or the RoleAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoint_roles_with_http_info(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_endpoint_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_uuid' is set
        if ('endpoint_uuid' not in params or
                params['endpoint_uuid'] is None):
            raise ValueError("Missing the required parameter `endpoint_uuid` when calling `auth_get_all_endpoint_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_uuid' in params:
            path_params['endpoint_uuid'] = params['endpoint_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/{endpoint_uuid}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericAuthObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_endpoints(self, **kwargs):  # noqa: E501
        """Return a collection of all Endpoints in the system  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoints(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_endpoints_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_endpoints_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_get_all_endpoints_with_http_info(self, **kwargs):  # noqa: E501
        """Return a collection of all Endpoints in the system  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_endpoints_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_endpoints" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_endpoint(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Get a single Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to.  A UUDEX Admin may get any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_endpoint(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_endpoint_with_http_info(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Get a single Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to.  A UUDEX Admin may get any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_endpoint_with_http_info(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_uuid' is set
        if ('endpoint_uuid' not in params or
                params['endpoint_uuid'] is None):
            raise ValueError("Missing the required parameter `endpoint_uuid` when calling `auth_get_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_uuid' in params:
            path_params['endpoint_uuid'] = params['endpoint_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/{endpoint_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Endpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_update_endpoint(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Update a single Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to AND the invoker must have the ParticipantAdmin role.    A UUDEX Admin may update any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_endpoint(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :param Endpoint body:
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_update_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_update_endpoint_with_http_info(endpoint_uuid, **kwargs)  # noqa: E501
            return data

    def auth_update_endpoint_with_http_info(self, endpoint_uuid, **kwargs):  # noqa: E501
        """Update a single Endpoint  # noqa: E501

        The Endpoint must belong to the same Participant the invoker belongs to AND the invoker must have the ParticipantAdmin role.    A UUDEX Admin may update any Endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_endpoint_with_http_info(endpoint_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_uuid: (required)
        :param Endpoint body:
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_update_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_uuid' is set
        if ('endpoint_uuid' not in params or
                params['endpoint_uuid'] is None):
            raise ValueError("Missing the required parameter `endpoint_uuid` when calling `auth_update_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_uuid' in params:
            path_params['endpoint_uuid'] = params['endpoint_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/{endpoint_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Endpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_peer_endpoints(self, **kwargs):  # noqa: E501
        """Returns a collection of all peer Endpoints in the calling Endpoint's Participant (organization)  # noqa: E501

        Returns a collection of peer Endpoints that are part of the invoker's Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_peer_endpoints(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_peer_endpoints_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_peer_endpoints_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_peer_endpoints_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a collection of all peer Endpoints in the calling Endpoint's Participant (organization)  # noqa: E501

        Returns a collection of peer Endpoints that are part of the invoker's Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_peer_endpoints_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_peer_endpoints" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/endpoints/peers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
