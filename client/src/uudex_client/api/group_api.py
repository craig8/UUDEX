# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uudex_client.api_client import ApiClient


class GroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_add_group_manager(self, group_uuid, **kwargs):  # noqa: E501
        """Adds a Group Manager to a Group  # noqa: E501

        The Group Manager can be an Endpoint, a Participant or another Group.  The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_add_group_manager(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param GenericAuthObject body:
        :return: GenericAuthObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_add_group_manager_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_add_group_manager_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_add_group_manager_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Adds a Group Manager to a Group  # noqa: E501

        The Group Manager can be an Endpoint, a Participant or another Group.  The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_add_group_manager_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param GenericAuthObject body:
        :return: GenericAuthObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_add_group_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_add_group_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/managers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericAuthObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_add_group_member(self, group_uuid, **kwargs):  # noqa: E501
        """Add a member to a group  # noqa: E501

        The invoker must be a Group Manager of the group.  May add an endpoint or a participant to a group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_add_group_member(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param GenericAuthObject body:
        :return: GenericAuthObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_add_group_member_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_add_group_member_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_add_group_member_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Add a member to a group  # noqa: E501

        The invoker must be a Group Manager of the group.  May add an endpoint or a participant to a group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_add_group_member_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param GenericAuthObject body:
        :return: GenericAuthObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_add_group_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_add_group_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericAuthObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_create_group(self, **kwargs):  # noqa: E501
        """Create a single Group  # noqa: E501

        Only a UUDEX Admin may create a group, thus the invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_create_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_create_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_create_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a single Group  # noqa: E501

        Only a UUDEX Admin may create a group, thus the invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_delete_group(self, group_uuid, **kwargs):  # noqa: E501
        """Delete a single Group  # noqa: E501

        Only a UUDEX Admin may delete a group.  The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_group(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_delete_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_delete_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_delete_group_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Delete a single Group  # noqa: E501

        Only a UUDEX Admin may delete a group.  The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_group_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_group_managers(self, group_uuid, **kwargs):  # noqa: E501
        """Return a collection of Group Managers for the given Group  # noqa: E501

        The invoker must be a Group Manager for the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_group_managers(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_group_managers_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_group_managers_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_group_managers_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Return a collection of Group Managers for the given Group  # noqa: E501

        The invoker must be a Group Manager for the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_group_managers_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_group_managers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_get_all_group_managers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/managers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericAuthObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_group_members(self, group_uuid, **kwargs):  # noqa: E501
        """Return a collection of Group Members for the given Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_group_members(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_group_members_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_group_members_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_group_members_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Return a collection of Group Members for the given Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_group_members_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_get_all_group_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericAuthObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_groups(self, **kwargs):  # noqa: E501
        """Return a collection of all Groups the invoker has manage rights to  # noqa: E501

        This call return all groups for which the invoker is a Group Manager.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_get_all_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Return a collection of all Groups the invoker has manage rights to  # noqa: E501

        This call return all groups for which the invoker is a Group Manager.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_group(self, group_uuid, **kwargs):  # noqa: E501
        """Get a single Group  # noqa: E501

        The invoker must be a Group Manager for the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_group(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_group_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Get a single Group  # noqa: E501

        The invoker must be a Group Manager for the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_group_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_get_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_remove_group_manager(self, group_uuid, object_uuid, object_type, **kwargs):  # noqa: E501
        """Remove a Group Manager from a Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_remove_group_manager(group_uuid, object_uuid, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param str object_uuid: Represents the Group Manager and is the UUID of either an Endpoint, a Participant or another Group. (required)
        :param str object_type: The object type of the object_uuid param.  Can be e or p for Endpoint or Participant (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_remove_group_manager_with_http_info(group_uuid, object_uuid, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_remove_group_manager_with_http_info(group_uuid, object_uuid, object_type, **kwargs)  # noqa: E501
            return data

    def auth_remove_group_manager_with_http_info(self, group_uuid, object_uuid, object_type, **kwargs):  # noqa: E501
        """Remove a Group Manager from a Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_remove_group_manager_with_http_info(group_uuid, object_uuid, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param str object_uuid: Represents the Group Manager and is the UUID of either an Endpoint, a Participant or another Group. (required)
        :param str object_type: The object type of the object_uuid param.  Can be e or p for Endpoint or Participant (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'object_uuid', 'object_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_remove_group_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_remove_group_manager`")  # noqa: E501
        # verify the required parameter 'object_uuid' is set
        if ('object_uuid' not in params or
                params['object_uuid'] is None):
            raise ValueError("Missing the required parameter `object_uuid` when calling `auth_remove_group_manager`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `auth_remove_group_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501
        if 'object_uuid' in params:
            path_params['object_uuid'] = params['object_uuid']  # noqa: E501

        query_params = []
        if 'object_type' in params:
            query_params.append(('object_type', params['object_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/managers/{object_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_remove_group_member(self, group_uuid, object_uuid, object_type, **kwargs):  # noqa: E501
        """Remove a member from a Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_remove_group_member(group_uuid, object_uuid, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param str object_uuid: Represents the group member and is the UUID of either an Endpoint or a Participant.  Note, a group cannot be assigned to another group. (required)
        :param str object_type: The object type of the object_uuid param.  Can be e for Endpoint or p for Participant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_remove_group_member_with_http_info(group_uuid, object_uuid, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_remove_group_member_with_http_info(group_uuid, object_uuid, object_type, **kwargs)  # noqa: E501
            return data

    def auth_remove_group_member_with_http_info(self, group_uuid, object_uuid, object_type, **kwargs):  # noqa: E501
        """Remove a member from a Group  # noqa: E501

        The invoker must be a Group Manager of the group.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_remove_group_member_with_http_info(group_uuid, object_uuid, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param str object_uuid: Represents the group member and is the UUID of either an Endpoint or a Participant.  Note, a group cannot be assigned to another group. (required)
        :param str object_type: The object type of the object_uuid param.  Can be e for Endpoint or p for Participant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'object_uuid', 'object_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_remove_group_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_remove_group_member`")  # noqa: E501
        # verify the required parameter 'object_uuid' is set
        if ('object_uuid' not in params or
                params['object_uuid'] is None):
            raise ValueError("Missing the required parameter `object_uuid` when calling `auth_remove_group_member`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `auth_remove_group_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501
        if 'object_uuid' in params:
            path_params['object_uuid'] = params['object_uuid']  # noqa: E501

        query_params = []
        if 'object_type' in params:
            query_params.append(('object_type', params['object_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}/members/{object_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_update_group(self, group_uuid, **kwargs):  # noqa: E501
        """Update a single Group  # noqa: E501

        Only a UUDEX Admin may update a group thus the invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_group(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param Group body:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_update_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_update_group_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def auth_update_group_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """Update a single Group  # noqa: E501

        Only a UUDEX Admin may update a group thus the invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_group_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: (required)
        :param Group body:
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if ('group_uuid' not in params or
                params['group_uuid'] is None):
            raise ValueError("Missing the required parameter `group_uuid` when calling `auth_update_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['group_uuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/groups/{group_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
