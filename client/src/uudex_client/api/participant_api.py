# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uudex_client.api_client import ApiClient


class ParticipantApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_create_participant(self, **kwargs):  # noqa: E501
        """Create a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_participant(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Participant body:
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_create_participant_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_create_participant_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_create_participant_with_http_info(self, **kwargs):  # noqa: E501
        """Create a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_participant_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Participant body:
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_participant" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Participant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_create_participant_contact(self, participant_uuid, **kwargs):  # noqa: E501
        """Create a single Participant Contact  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to create a Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may create any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_participant_contact(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param Contact body:
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_create_participant_contact_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_create_participant_contact_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_create_participant_contact_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Create a single Participant Contact  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to create a Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may create any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_create_participant_contact_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param Contact body:
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_participant_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_create_participant_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_delete_participant(self, participant_uuid, **kwargs):  # noqa: E501
        """Delete a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_participant(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_delete_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_delete_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_delete_participant_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Delete a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_participant_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_delete_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_delete_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_delete_participant_contact(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Delete a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to delete the Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may delete any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_participant_contact(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_delete_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_delete_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
            return data

    def auth_delete_participant_contact_with_http_info(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Delete a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to delete the Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may delete any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_delete_participant_contact_with_http_info(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid', 'contact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_delete_participant_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_delete_participant_contact`")  # noqa: E501
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `auth_delete_participant_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/contacts/{contact_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_participant_contacts(self, participant_uuid, **kwargs):  # noqa: E501
        """Return a collection of all Contacts for given Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to get the Contacts for AND it must have the ParticipantAdmin role.  A UUDEX Admin may get the Contacts for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participant_contacts(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: list[Contact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_participant_contacts_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_participant_contacts_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_participant_contacts_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Return a collection of all Contacts for given Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to get the Contacts for AND it must have the ParticipantAdmin role.  A UUDEX Admin may get the Contacts for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participant_contacts_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: list[Contact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_participant_contacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_get_all_participant_contacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contact]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_participant_groups(self, participant_uuid, **kwargs):  # noqa: E501
        """Returns a collection of groups the Participant is a member of  # noqa: E501

        The invoker must belong to the Participant it is passing in AND it must have the ParticipantAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participant_groups(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_participant_groups_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_participant_groups_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_all_participant_groups_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Returns a collection of groups the Participant is a member of  # noqa: E501

        The invoker must belong to the Participant it is passing in AND it must have the ParticipantAdmin role.  A UUDEX Admin may invoke this call without restrictions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participant_groups_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: list[GenericAuthObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_participant_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_get_all_participant_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericAuthObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_all_participants(self, **kwargs):  # noqa: E501
        """Return a collection of all Participants in the system  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Participant]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_all_participants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_all_participants_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_get_all_participants_with_http_info(self, **kwargs):  # noqa: E501
        """Return a collection of all Participants in the system  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_all_participants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Participant]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_all_participants" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Participant]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_participant(self, participant_uuid, **kwargs):  # noqa: E501
        """Get a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_participant(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_get_participant_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Get a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_participant_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_get_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Participant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_get_participant_contact(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Get a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to get the Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may get any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_participant_contact(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_get_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_get_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
            return data

    def auth_get_participant_contact_with_http_info(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Get a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to get the Contact for AND it must have the ParticipantAdmin role.  A UUDEX Admin may get any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_get_participant_contact_with_http_info(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid', 'contact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_get_participant_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_get_participant_contact`")  # noqa: E501
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `auth_get_participant_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/contacts/{contact_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_update_participant(self, participant_uuid, **kwargs):  # noqa: E501
        """Update a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_participant(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param Participant body:
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_update_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_update_participant_with_http_info(participant_uuid, **kwargs)  # noqa: E501
            return data

    def auth_update_participant_with_http_info(self, participant_uuid, **kwargs):  # noqa: E501
        """Update a single Participant  # noqa: E501

        The invoker must be a UUDEX Admin otherwise the call will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_participant_with_http_info(participant_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param Participant body:
        :return: Participant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_update_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_update_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Participant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_update_participant_contact(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Update a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to update the Contact for AND it must have the ParticipantAdmin role.    A UUDEX Admin may update any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_participant_contact(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :param Contact body:
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_update_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_update_participant_contact_with_http_info(participant_uuid, contact_id, **kwargs)  # noqa: E501
            return data

    def auth_update_participant_contact_with_http_info(self, participant_uuid, contact_id, **kwargs):  # noqa: E501
        """Update a single Contact for the Participant  # noqa: E501

        The invoker must be belong to the same Participant it is attempting to update the Contact for AND it must have the ParticipantAdmin role.    A UUDEX Admin may update any Contact for any Participant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_update_participant_contact_with_http_info(participant_uuid, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str participant_uuid: (required)
        :param int contact_id: (required)
        :param Contact body:
        :return: Contact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['participant_uuid', 'contact_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_update_participant_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'participant_uuid' is set
        if ('participant_uuid' not in params or
                params['participant_uuid'] is None):
            raise ValueError("Missing the required parameter `participant_uuid` when calling `auth_update_participant_contact`")  # noqa: E501
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `auth_update_participant_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'participant_uuid' in params:
            path_params['participant_uuid'] = params['participant_uuid']  # noqa: E501
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/{participant_uuid}/contacts/{contact_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parent_participant(self, **kwargs):  # noqa: E501
        """Returns the calling Endpoint's parent Participant  # noqa: E501

        Returns the invoker's parent Participant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parent_participant(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ParticipantEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parent_participant_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_parent_participant_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_parent_participant_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the calling Endpoint's parent Participant  # noqa: E501

        Returns the invoker's parent Participant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parent_participant_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ParticipantEnriched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parent_participant" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/participants/parent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantEnriched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
