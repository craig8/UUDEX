# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from uudex_client.models import Subscription


class SubscriptionEnriched(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_uuid': 'str',
        'subscription_name': 'str',
        'subscription_state': 'str',
        'create_datetime': 'datetime',
        'owner_endpoint_uuid': 'str',
        'subjects': 'list[SubscriptionEnrichedSubjects]'
    }
    if hasattr(Subscription, "swagger_types"):
        swagger_types.update(Subscription.swagger_types)

    attribute_map = {
        'subscription_uuid': 'subscription_uuid',
        'subscription_name': 'subscription_name',
        'subscription_state': 'subscription_state',
        'create_datetime': 'create_datetime',
        'owner_endpoint_uuid': 'owner_endpoint_uuid',
        'subjects': 'subjects'
    }
    if hasattr(Subscription, "attribute_map"):
        attribute_map.update(Subscription.attribute_map)

    def __init__(self, subscription_uuid=None, subscription_name=None, subscription_state=None, create_datetime=None, owner_endpoint_uuid=None, subjects=None, *args, **kwargs):  # noqa: E501
        """SubscriptionEnriched - a model defined in Swagger"""  # noqa: E501
        self._subscription_uuid = None
        self._subscription_name = None
        self._subscription_state = None
        self._create_datetime = None
        self._owner_endpoint_uuid = None
        self._subjects = None
        self.discriminator = None
        if subscription_uuid is not None:
            self.subscription_uuid = subscription_uuid
        self.subscription_name = subscription_name
        self.subscription_state = subscription_state
        if create_datetime is not None:
            self.create_datetime = create_datetime
        if owner_endpoint_uuid is not None:
            self.owner_endpoint_uuid = owner_endpoint_uuid
        if subjects is not None:
            self.subjects = subjects
        #Subscription.__init__(self, *args, **kwargs)

    @property
    def subscription_uuid(self):
        """Gets the subscription_uuid of this SubscriptionEnriched.  # noqa: E501


        :return: The subscription_uuid of this SubscriptionEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subscription_uuid

    @subscription_uuid.setter
    def subscription_uuid(self, subscription_uuid):
        """Sets the subscription_uuid of this SubscriptionEnriched.


        :param subscription_uuid: The subscription_uuid of this SubscriptionEnriched.  # noqa: E501
        :type: str
        """

        self._subscription_uuid = subscription_uuid

    @property
    def subscription_name(self):
        """Gets the subscription_name of this SubscriptionEnriched.  # noqa: E501


        :return: The subscription_name of this SubscriptionEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this SubscriptionEnriched.


        :param subscription_name: The subscription_name of this SubscriptionEnriched.  # noqa: E501
        :type: str
        """
        if subscription_name is None:
            raise ValueError("Invalid value for `subscription_name`, must not be `None`")  # noqa: E501

        self._subscription_name = subscription_name

    @property
    def subscription_state(self):
        """Gets the subscription_state of this SubscriptionEnriched.  # noqa: E501


        :return: The subscription_state of this SubscriptionEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subscription_state

    @subscription_state.setter
    def subscription_state(self, subscription_state):
        """Sets the subscription_state of this SubscriptionEnriched.


        :param subscription_state: The subscription_state of this SubscriptionEnriched.  # noqa: E501
        :type: str
        """
        if subscription_state is None:
            raise ValueError("Invalid value for `subscription_state`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "PAUSED"]  # noqa: E501
        if subscription_state not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_state` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_state, allowed_values)
            )

        self._subscription_state = subscription_state

    @property
    def create_datetime(self):
        """Gets the create_datetime of this SubscriptionEnriched.  # noqa: E501


        :return: The create_datetime of this SubscriptionEnriched.  # noqa: E501
        :rtype: datetime
        """
        return self._create_datetime

    @create_datetime.setter
    def create_datetime(self, create_datetime):
        """Sets the create_datetime of this SubscriptionEnriched.


        :param create_datetime: The create_datetime of this SubscriptionEnriched.  # noqa: E501
        :type: datetime
        """

        self._create_datetime = create_datetime

    @property
    def owner_endpoint_uuid(self):
        """Gets the owner_endpoint_uuid of this SubscriptionEnriched.  # noqa: E501


        :return: The owner_endpoint_uuid of this SubscriptionEnriched.  # noqa: E501
        :rtype: str
        """
        return self._owner_endpoint_uuid

    @owner_endpoint_uuid.setter
    def owner_endpoint_uuid(self, owner_endpoint_uuid):
        """Sets the owner_endpoint_uuid of this SubscriptionEnriched.


        :param owner_endpoint_uuid: The owner_endpoint_uuid of this SubscriptionEnriched.  # noqa: E501
        :type: str
        """

        self._owner_endpoint_uuid = owner_endpoint_uuid

    @property
    def subjects(self):
        """Gets the subjects of this SubscriptionEnriched.  # noqa: E501


        :return: The subjects of this SubscriptionEnriched.  # noqa: E501
        :rtype: list[SubscriptionEnrichedSubjects]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this SubscriptionEnriched.


        :param subjects: The subjects of this SubscriptionEnriched.  # noqa: E501
        :type: list[SubscriptionEnrichedSubjects]
        """

        self._subjects = subjects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionEnriched, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionEnriched):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
