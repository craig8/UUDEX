# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payload_item': 'int',
        'payload_item_count': 'int',
        'change_log': 'list[MetadataChangeLog]'
    }

    attribute_map = {
        'payload_item': 'payload_item',
        'payload_item_count': 'payload_item_count',
        'change_log': 'change_log'
    }

    def __init__(self, payload_item=None, payload_item_count=None, change_log=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501
        self._payload_item = None
        self._payload_item_count = None
        self._change_log = None
        self.discriminator = None
        if payload_item is not None:
            self.payload_item = payload_item
        if payload_item_count is not None:
            self.payload_item_count = payload_item_count
        if change_log is not None:
            self.change_log = change_log

    @property
    def payload_item(self):
        """Gets the payload_item of this Metadata.  # noqa: E501


        :return: The payload_item of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._payload_item

    @payload_item.setter
    def payload_item(self, payload_item):
        """Sets the payload_item of this Metadata.


        :param payload_item: The payload_item of this Metadata.  # noqa: E501
        :type: int
        """

        self._payload_item = payload_item

    @property
    def payload_item_count(self):
        """Gets the payload_item_count of this Metadata.  # noqa: E501


        :return: The payload_item_count of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._payload_item_count

    @payload_item_count.setter
    def payload_item_count(self, payload_item_count):
        """Sets the payload_item_count of this Metadata.


        :param payload_item_count: The payload_item_count of this Metadata.  # noqa: E501
        :type: int
        """

        self._payload_item_count = payload_item_count

    @property
    def change_log(self):
        """Gets the change_log of this Metadata.  # noqa: E501


        :return: The change_log of this Metadata.  # noqa: E501
        :rtype: list[MetadataChangeLog]
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this Metadata.


        :param change_log: The change_log of this Metadata.  # noqa: E501
        :type: list[MetadataChangeLog]
        """

        self._change_log = change_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
