# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Endpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_uuid': 'str',
        'endpoint_user_name': 'str',
        'certificate_dn': 'str',
        'description': 'str',
        'active_sw': 'str',
        'create_datetime': 'datetime',
        'participant_uuid': 'str'
    }

    attribute_map = {
        'endpoint_uuid': 'endpoint_uuid',
        'endpoint_user_name': 'endpoint_user_name',
        'certificate_dn': 'certificate_dn',
        'description': 'description',
        'active_sw': 'active_sw',
        'create_datetime': 'create_datetime',
        'participant_uuid': 'participant_uuid'
    }

    def __init__(self, endpoint_uuid=None, endpoint_user_name=None, certificate_dn=None, description=None, active_sw=None, create_datetime=None, participant_uuid=None):  # noqa: E501
        """Endpoint - a model defined in Swagger"""  # noqa: E501
        self._endpoint_uuid = None
        self._endpoint_user_name = None
        self._certificate_dn = None
        self._description = None
        self._active_sw = None
        self._create_datetime = None
        self._participant_uuid = None
        self.discriminator = None
        if endpoint_uuid is not None:
            self.endpoint_uuid = endpoint_uuid
        self.endpoint_user_name = endpoint_user_name
        self.certificate_dn = certificate_dn
        self.description = description
        self.active_sw = active_sw
        if create_datetime is not None:
            self.create_datetime = create_datetime
        self.participant_uuid = participant_uuid

    @property
    def endpoint_uuid(self):
        """Gets the endpoint_uuid of this Endpoint.  # noqa: E501


        :return: The endpoint_uuid of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_uuid

    @endpoint_uuid.setter
    def endpoint_uuid(self, endpoint_uuid):
        """Sets the endpoint_uuid of this Endpoint.


        :param endpoint_uuid: The endpoint_uuid of this Endpoint.  # noqa: E501
        :type: str
        """

        self._endpoint_uuid = endpoint_uuid

    @property
    def endpoint_user_name(self):
        """Gets the endpoint_user_name of this Endpoint.  # noqa: E501


        :return: The endpoint_user_name of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_user_name

    @endpoint_user_name.setter
    def endpoint_user_name(self, endpoint_user_name):
        """Sets the endpoint_user_name of this Endpoint.


        :param endpoint_user_name: The endpoint_user_name of this Endpoint.  # noqa: E501
        :type: str
        """
        if endpoint_user_name is None:
            raise ValueError("Invalid value for `endpoint_user_name`, must not be `None`")  # noqa: E501

        self._endpoint_user_name = endpoint_user_name

    @property
    def certificate_dn(self):
        """Gets the certificate_dn of this Endpoint.  # noqa: E501


        :return: The certificate_dn of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._certificate_dn

    @certificate_dn.setter
    def certificate_dn(self, certificate_dn):
        """Sets the certificate_dn of this Endpoint.


        :param certificate_dn: The certificate_dn of this Endpoint.  # noqa: E501
        :type: str
        """
        if certificate_dn is None:
            raise ValueError("Invalid value for `certificate_dn`, must not be `None`")  # noqa: E501

        self._certificate_dn = certificate_dn

    @property
    def description(self):
        """Gets the description of this Endpoint.  # noqa: E501


        :return: The description of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Endpoint.


        :param description: The description of this Endpoint.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def active_sw(self):
        """Gets the active_sw of this Endpoint.  # noqa: E501


        :return: The active_sw of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._active_sw

    @active_sw.setter
    def active_sw(self, active_sw):
        """Sets the active_sw of this Endpoint.


        :param active_sw: The active_sw of this Endpoint.  # noqa: E501
        :type: str
        """
        if active_sw is None:
            raise ValueError("Invalid value for `active_sw`, must not be `None`")  # noqa: E501
        allowed_values = ["Y", "N"]  # noqa: E501
        if active_sw not in allowed_values:
            raise ValueError(
                "Invalid value for `active_sw` ({0}), must be one of {1}"  # noqa: E501
                .format(active_sw, allowed_values)
            )

        self._active_sw = active_sw

    @property
    def create_datetime(self):
        """Gets the create_datetime of this Endpoint.  # noqa: E501


        :return: The create_datetime of this Endpoint.  # noqa: E501
        :rtype: datetime
        """
        return self._create_datetime

    @create_datetime.setter
    def create_datetime(self, create_datetime):
        """Sets the create_datetime of this Endpoint.


        :param create_datetime: The create_datetime of this Endpoint.  # noqa: E501
        :type: datetime
        """

        self._create_datetime = create_datetime

    @property
    def participant_uuid(self):
        """Gets the participant_uuid of this Endpoint.  # noqa: E501


        :return: The participant_uuid of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._participant_uuid

    @participant_uuid.setter
    def participant_uuid(self, participant_uuid):
        """Sets the participant_uuid of this Endpoint.


        :param participant_uuid: The participant_uuid of this Endpoint.  # noqa: E501
        :type: str
        """
        if participant_uuid is None:
            raise ValueError("Invalid value for `participant_uuid`, must not be `None`")  # noqa: E501

        self._participant_uuid = participant_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Endpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Endpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
