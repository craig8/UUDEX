# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SubjectPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_policy_uuid': 'str',
        'action': 'str',
        'full_queue_behavior': 'str',
        'max_queue_size_kb': 'int',
        'max_message_count': 'int',
        'max_priority': 'int',
        'target_participant_uuid': 'str',
        'dataset_definition_uuid': 'str'
    }

    attribute_map = {
        'subject_policy_uuid': 'subject_policy_uuid',
        'action': 'action',
        'full_queue_behavior': 'full_queue_behavior',
        'max_queue_size_kb': 'max_queue_size_kb',
        'max_message_count': 'max_message_count',
        'max_priority': 'max_priority',
        'target_participant_uuid': 'target_participant_uuid',
        'dataset_definition_uuid': 'dataset_definition_uuid'
    }

    def __init__(self, subject_policy_uuid=None, action=None, full_queue_behavior=None, max_queue_size_kb=None, max_message_count=None, max_priority=None, target_participant_uuid=None, dataset_definition_uuid=None):  # noqa: E501
        """SubjectPolicy - a model defined in Swagger"""  # noqa: E501
        self._subject_policy_uuid = None
        self._action = None
        self._full_queue_behavior = None
        self._max_queue_size_kb = None
        self._max_message_count = None
        self._max_priority = None
        self._target_participant_uuid = None
        self._dataset_definition_uuid = None
        self.discriminator = None
        if subject_policy_uuid is not None:
            self.subject_policy_uuid = subject_policy_uuid
        self.action = action
        if full_queue_behavior is not None:
            self.full_queue_behavior = full_queue_behavior
        if max_queue_size_kb is not None:
            self.max_queue_size_kb = max_queue_size_kb
        if max_message_count is not None:
            self.max_message_count = max_message_count
        if max_priority is not None:
            self.max_priority = max_priority
        if target_participant_uuid is not None:
            self.target_participant_uuid = target_participant_uuid
        if dataset_definition_uuid is not None:
            self.dataset_definition_uuid = dataset_definition_uuid

    @property
    def subject_policy_uuid(self):
        """Gets the subject_policy_uuid of this SubjectPolicy.  # noqa: E501


        :return: The subject_policy_uuid of this SubjectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._subject_policy_uuid

    @subject_policy_uuid.setter
    def subject_policy_uuid(self, subject_policy_uuid):
        """Sets the subject_policy_uuid of this SubjectPolicy.


        :param subject_policy_uuid: The subject_policy_uuid of this SubjectPolicy.  # noqa: E501
        :type: str
        """

        self._subject_policy_uuid = subject_policy_uuid

    @property
    def action(self):
        """Gets the action of this SubjectPolicy.  # noqa: E501


        :return: The action of this SubjectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SubjectPolicy.


        :param action: The action of this SubjectPolicy.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["ALLOW", "DENY", "REVIEW"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def full_queue_behavior(self):
        """Gets the full_queue_behavior of this SubjectPolicy.  # noqa: E501


        :return: The full_queue_behavior of this SubjectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._full_queue_behavior

    @full_queue_behavior.setter
    def full_queue_behavior(self, full_queue_behavior):
        """Sets the full_queue_behavior of this SubjectPolicy.


        :param full_queue_behavior: The full_queue_behavior of this SubjectPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLOCK_NEW", "PURGE_OLD", "NO_CONSTRAINT"]  # noqa: E501
        if full_queue_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `full_queue_behavior` ({0}), must be one of {1}"  # noqa: E501
                .format(full_queue_behavior, allowed_values)
            )

        self._full_queue_behavior = full_queue_behavior

    @property
    def max_queue_size_kb(self):
        """Gets the max_queue_size_kb of this SubjectPolicy.  # noqa: E501


        :return: The max_queue_size_kb of this SubjectPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_queue_size_kb

    @max_queue_size_kb.setter
    def max_queue_size_kb(self, max_queue_size_kb):
        """Sets the max_queue_size_kb of this SubjectPolicy.


        :param max_queue_size_kb: The max_queue_size_kb of this SubjectPolicy.  # noqa: E501
        :type: int
        """

        self._max_queue_size_kb = max_queue_size_kb

    @property
    def max_message_count(self):
        """Gets the max_message_count of this SubjectPolicy.  # noqa: E501


        :return: The max_message_count of this SubjectPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_message_count

    @max_message_count.setter
    def max_message_count(self, max_message_count):
        """Sets the max_message_count of this SubjectPolicy.


        :param max_message_count: The max_message_count of this SubjectPolicy.  # noqa: E501
        :type: int
        """

        self._max_message_count = max_message_count

    @property
    def max_priority(self):
        """Gets the max_priority of this SubjectPolicy.  # noqa: E501


        :return: The max_priority of this SubjectPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_priority

    @max_priority.setter
    def max_priority(self, max_priority):
        """Sets the max_priority of this SubjectPolicy.


        :param max_priority: The max_priority of this SubjectPolicy.  # noqa: E501
        :type: int
        """

        self._max_priority = max_priority

    @property
    def target_participant_uuid(self):
        """Gets the target_participant_uuid of this SubjectPolicy.  # noqa: E501


        :return: The target_participant_uuid of this SubjectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._target_participant_uuid

    @target_participant_uuid.setter
    def target_participant_uuid(self, target_participant_uuid):
        """Sets the target_participant_uuid of this SubjectPolicy.


        :param target_participant_uuid: The target_participant_uuid of this SubjectPolicy.  # noqa: E501
        :type: str
        """

        self._target_participant_uuid = target_participant_uuid

    @property
    def dataset_definition_uuid(self):
        """Gets the dataset_definition_uuid of this SubjectPolicy.  # noqa: E501


        :return: The dataset_definition_uuid of this SubjectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._dataset_definition_uuid

    @dataset_definition_uuid.setter
    def dataset_definition_uuid(self, dataset_definition_uuid):
        """Sets the dataset_definition_uuid of this SubjectPolicy.


        :param dataset_definition_uuid: The dataset_definition_uuid of this SubjectPolicy.  # noqa: E501
        :type: str
        """

        self._dataset_definition_uuid = dataset_definition_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubjectPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
