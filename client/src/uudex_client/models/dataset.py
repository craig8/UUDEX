# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Dataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_uuid': 'str',
        'dataset_name': 'str',
        'description': 'str',
        'properties': 'str',
        'payload': 'str',
        'payload_compression_algorithm': 'str',
        'subject_uuid': 'str'
    }

    attribute_map = {
        'dataset_uuid': 'dataset_uuid',
        'dataset_name': 'dataset_name',
        'description': 'description',
        'properties': 'properties',
        'payload': 'payload',
        'payload_compression_algorithm': 'payload_compression_algorithm',
        'subject_uuid': 'subject_uuid'
    }

    def __init__(self, dataset_uuid=None, dataset_name=None, description=None, properties=None, payload=None, payload_compression_algorithm=None, subject_uuid=None):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501
        self._dataset_uuid = None
        self._dataset_name = None
        self._description = None
        self._properties = None
        self._payload = None
        self._payload_compression_algorithm = None
        self._subject_uuid = None
        self.discriminator = None
        if dataset_uuid is not None:
            self.dataset_uuid = dataset_uuid
        self.dataset_name = dataset_name
        self.description = description
        if properties is not None:
            self.properties = properties
        self.payload = payload
        self.payload_compression_algorithm = payload_compression_algorithm
        self.subject_uuid = subject_uuid

    @property
    def dataset_uuid(self):
        """Gets the dataset_uuid of this Dataset.  # noqa: E501


        :return: The dataset_uuid of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._dataset_uuid

    @dataset_uuid.setter
    def dataset_uuid(self, dataset_uuid):
        """Sets the dataset_uuid of this Dataset.


        :param dataset_uuid: The dataset_uuid of this Dataset.  # noqa: E501
        :type: str
        """

        self._dataset_uuid = dataset_uuid

    @property
    def dataset_name(self):
        """Gets the dataset_name of this Dataset.  # noqa: E501


        :return: The dataset_name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this Dataset.


        :param dataset_name: The dataset_name of this Dataset.  # noqa: E501
        :type: str
        """
        if dataset_name is None:
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    @property
    def description(self):
        """Gets the description of this Dataset.  # noqa: E501


        :return: The description of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.


        :param description: The description of this Dataset.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this Dataset.  # noqa: E501


        :return: The properties of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Dataset.


        :param properties: The properties of this Dataset.  # noqa: E501
        :type: str
        """

        self._properties = properties

    @property
    def payload(self):
        """Gets the payload of this Dataset.  # noqa: E501


        :return: The payload of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Dataset.


        :param payload: The payload of this Dataset.  # noqa: E501
        :type: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    @property
    def payload_compression_algorithm(self):
        """Gets the payload_compression_algorithm of this Dataset.  # noqa: E501


        :return: The payload_compression_algorithm of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._payload_compression_algorithm

    @payload_compression_algorithm.setter
    def payload_compression_algorithm(self, payload_compression_algorithm):
        """Sets the payload_compression_algorithm of this Dataset.


        :param payload_compression_algorithm: The payload_compression_algorithm of this Dataset.  # noqa: E501
        :type: str
        """
        if payload_compression_algorithm is None:
            raise ValueError("Invalid value for `payload_compression_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["AVRO", "LZMA", "NONE"]  # noqa: E501
        if payload_compression_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `payload_compression_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(payload_compression_algorithm, allowed_values)
            )

        self._payload_compression_algorithm = payload_compression_algorithm

    @property
    def subject_uuid(self):
        """Gets the subject_uuid of this Dataset.  # noqa: E501


        :return: The subject_uuid of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._subject_uuid

    @subject_uuid.setter
    def subject_uuid(self, subject_uuid):
        """Sets the subject_uuid of this Dataset.


        :param subject_uuid: The subject_uuid of this Dataset.  # noqa: E501
        :type: str
        """
        if subject_uuid is None:
            raise ValueError("Invalid value for `subject_uuid`, must not be `None`")  # noqa: E501

        self._subject_uuid = subject_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
