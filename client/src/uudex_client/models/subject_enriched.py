# coding: utf-8

"""
    UUDEXApi

    uudex api  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jeff.welsh@pnnl.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SubjectEnriched(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_uuid': 'str',
        'subject_name': 'str',
        'dataset_instance_key': 'str',
        'description': 'str',
        'subscription_type': 'str',
        'fulfillment_types_available': 'str',
        'full_queue_behavior': 'str',
        'max_queue_size_kb': 'int',
        'max_message_count': 'int',
        'priority': 'int',
        'backing_exchange_name': 'str',
        'owner_participant_uuid': 'str',
        'owner_participant_short_name': 'str',
        'create_datetime': 'datetime',
        'dataset_definition': 'DatasetDefinition'
    }

    attribute_map = {
        'subject_uuid': 'subject_uuid',
        'subject_name': 'subject_name',
        'dataset_instance_key': 'dataset_instance_key',
        'description': 'description',
        'subscription_type': 'subscription_type',
        'fulfillment_types_available': 'fulfillment_types_available',
        'full_queue_behavior': 'full_queue_behavior',
        'max_queue_size_kb': 'max_queue_size_kb',
        'max_message_count': 'max_message_count',
        'priority': 'priority',
        'backing_exchange_name': 'backing_exchange_name',
        'owner_participant_uuid': 'owner_participant_uuid',
        'owner_participant_short_name': 'owner_participant_short_name',
        'create_datetime': 'create_datetime',
        'dataset_definition': 'dataset_definition'
    }

    def __init__(self, subject_uuid=None, subject_name=None, dataset_instance_key=None, description=None, subscription_type=None, fulfillment_types_available=None, full_queue_behavior=None, max_queue_size_kb=None, max_message_count=None, priority=None, backing_exchange_name=None, owner_participant_uuid=None, owner_participant_short_name=None, create_datetime=None, dataset_definition=None):  # noqa: E501
        """SubjectEnriched - a model defined in Swagger"""  # noqa: E501
        self._subject_uuid = None
        self._subject_name = None
        self._dataset_instance_key = None
        self._description = None
        self._subscription_type = None
        self._fulfillment_types_available = None
        self._full_queue_behavior = None
        self._max_queue_size_kb = None
        self._max_message_count = None
        self._priority = None
        self._backing_exchange_name = None
        self._owner_participant_uuid = None
        self._owner_participant_short_name = None
        self._create_datetime = None
        self._dataset_definition = None
        self.discriminator = None
        if subject_uuid is not None:
            self.subject_uuid = subject_uuid
        if subject_name is not None:
            self.subject_name = subject_name
        if dataset_instance_key is not None:
            self.dataset_instance_key = dataset_instance_key
        if description is not None:
            self.description = description
        if subscription_type is not None:
            self.subscription_type = subscription_type
        if fulfillment_types_available is not None:
            self.fulfillment_types_available = fulfillment_types_available
        if full_queue_behavior is not None:
            self.full_queue_behavior = full_queue_behavior
        if max_queue_size_kb is not None:
            self.max_queue_size_kb = max_queue_size_kb
        if max_message_count is not None:
            self.max_message_count = max_message_count
        if priority is not None:
            self.priority = priority
        if backing_exchange_name is not None:
            self.backing_exchange_name = backing_exchange_name
        if owner_participant_uuid is not None:
            self.owner_participant_uuid = owner_participant_uuid
        if owner_participant_short_name is not None:
            self.owner_participant_short_name = owner_participant_short_name
        if create_datetime is not None:
            self.create_datetime = create_datetime
        if dataset_definition is not None:
            self.dataset_definition = dataset_definition

    @property
    def subject_uuid(self):
        """Gets the subject_uuid of this SubjectEnriched.  # noqa: E501


        :return: The subject_uuid of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subject_uuid

    @subject_uuid.setter
    def subject_uuid(self, subject_uuid):
        """Sets the subject_uuid of this SubjectEnriched.


        :param subject_uuid: The subject_uuid of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._subject_uuid = subject_uuid

    @property
    def subject_name(self):
        """Gets the subject_name of this SubjectEnriched.  # noqa: E501


        :return: The subject_name of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this SubjectEnriched.


        :param subject_name: The subject_name of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def dataset_instance_key(self):
        """Gets the dataset_instance_key of this SubjectEnriched.  # noqa: E501


        :return: The dataset_instance_key of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._dataset_instance_key

    @dataset_instance_key.setter
    def dataset_instance_key(self, dataset_instance_key):
        """Sets the dataset_instance_key of this SubjectEnriched.


        :param dataset_instance_key: The dataset_instance_key of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._dataset_instance_key = dataset_instance_key

    @property
    def description(self):
        """Gets the description of this SubjectEnriched.  # noqa: E501


        :return: The description of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubjectEnriched.


        :param description: The description of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def subscription_type(self):
        """Gets the subscription_type of this SubjectEnriched.  # noqa: E501


        :return: The subscription_type of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this SubjectEnriched.


        :param subscription_type: The subscription_type of this SubjectEnriched.  # noqa: E501
        :type: str
        """
        allowed_values = ["MEASUREMENT_VALUES", "EVENT"]  # noqa: E501
        if subscription_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_type, allowed_values)
            )

        self._subscription_type = subscription_type

    @property
    def fulfillment_types_available(self):
        """Gets the fulfillment_types_available of this SubjectEnriched.  # noqa: E501


        :return: The fulfillment_types_available of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_types_available

    @fulfillment_types_available.setter
    def fulfillment_types_available(self, fulfillment_types_available):
        """Sets the fulfillment_types_available of this SubjectEnriched.


        :param fulfillment_types_available: The fulfillment_types_available of this SubjectEnriched.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATA_PUSH", "DATA_NOTIFY", "BOTH"]  # noqa: E501
        if fulfillment_types_available not in allowed_values:
            raise ValueError(
                "Invalid value for `fulfillment_types_available` ({0}), must be one of {1}"  # noqa: E501
                .format(fulfillment_types_available, allowed_values)
            )

        self._fulfillment_types_available = fulfillment_types_available

    @property
    def full_queue_behavior(self):
        """Gets the full_queue_behavior of this SubjectEnriched.  # noqa: E501


        :return: The full_queue_behavior of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._full_queue_behavior

    @full_queue_behavior.setter
    def full_queue_behavior(self, full_queue_behavior):
        """Sets the full_queue_behavior of this SubjectEnriched.


        :param full_queue_behavior: The full_queue_behavior of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._full_queue_behavior = full_queue_behavior

    @property
    def max_queue_size_kb(self):
        """Gets the max_queue_size_kb of this SubjectEnriched.  # noqa: E501


        :return: The max_queue_size_kb of this SubjectEnriched.  # noqa: E501
        :rtype: int
        """
        return self._max_queue_size_kb

    @max_queue_size_kb.setter
    def max_queue_size_kb(self, max_queue_size_kb):
        """Sets the max_queue_size_kb of this SubjectEnriched.


        :param max_queue_size_kb: The max_queue_size_kb of this SubjectEnriched.  # noqa: E501
        :type: int
        """

        self._max_queue_size_kb = max_queue_size_kb

    @property
    def max_message_count(self):
        """Gets the max_message_count of this SubjectEnriched.  # noqa: E501


        :return: The max_message_count of this SubjectEnriched.  # noqa: E501
        :rtype: int
        """
        return self._max_message_count

    @max_message_count.setter
    def max_message_count(self, max_message_count):
        """Sets the max_message_count of this SubjectEnriched.


        :param max_message_count: The max_message_count of this SubjectEnriched.  # noqa: E501
        :type: int
        """

        self._max_message_count = max_message_count

    @property
    def priority(self):
        """Gets the priority of this SubjectEnriched.  # noqa: E501


        :return: The priority of this SubjectEnriched.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SubjectEnriched.


        :param priority: The priority of this SubjectEnriched.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def backing_exchange_name(self):
        """Gets the backing_exchange_name of this SubjectEnriched.  # noqa: E501


        :return: The backing_exchange_name of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._backing_exchange_name

    @backing_exchange_name.setter
    def backing_exchange_name(self, backing_exchange_name):
        """Sets the backing_exchange_name of this SubjectEnriched.


        :param backing_exchange_name: The backing_exchange_name of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._backing_exchange_name = backing_exchange_name

    @property
    def owner_participant_uuid(self):
        """Gets the owner_participant_uuid of this SubjectEnriched.  # noqa: E501


        :return: The owner_participant_uuid of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._owner_participant_uuid

    @owner_participant_uuid.setter
    def owner_participant_uuid(self, owner_participant_uuid):
        """Sets the owner_participant_uuid of this SubjectEnriched.


        :param owner_participant_uuid: The owner_participant_uuid of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._owner_participant_uuid = owner_participant_uuid

    @property
    def owner_participant_short_name(self):
        """Gets the owner_participant_short_name of this SubjectEnriched.  # noqa: E501


        :return: The owner_participant_short_name of this SubjectEnriched.  # noqa: E501
        :rtype: str
        """
        return self._owner_participant_short_name

    @owner_participant_short_name.setter
    def owner_participant_short_name(self, owner_participant_short_name):
        """Sets the owner_participant_short_name of this SubjectEnriched.


        :param owner_participant_short_name: The owner_participant_short_name of this SubjectEnriched.  # noqa: E501
        :type: str
        """

        self._owner_participant_short_name = owner_participant_short_name

    @property
    def create_datetime(self):
        """Gets the create_datetime of this SubjectEnriched.  # noqa: E501


        :return: The create_datetime of this SubjectEnriched.  # noqa: E501
        :rtype: datetime
        """
        return self._create_datetime

    @create_datetime.setter
    def create_datetime(self, create_datetime):
        """Sets the create_datetime of this SubjectEnriched.


        :param create_datetime: The create_datetime of this SubjectEnriched.  # noqa: E501
        :type: datetime
        """

        self._create_datetime = create_datetime

    @property
    def dataset_definition(self):
        """Gets the dataset_definition of this SubjectEnriched.  # noqa: E501


        :return: The dataset_definition of this SubjectEnriched.  # noqa: E501
        :rtype: DatasetDefinition
        """
        return self._dataset_definition

    @dataset_definition.setter
    def dataset_definition(self, dataset_definition):
        """Sets the dataset_definition of this SubjectEnriched.


        :param dataset_definition: The dataset_definition of this SubjectEnriched.  # noqa: E501
        :type: DatasetDefinition
        """

        self._dataset_definition = dataset_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubjectEnriched, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectEnriched):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
